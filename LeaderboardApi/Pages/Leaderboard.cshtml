@page
@model LeaderboardModel
@{
    ViewData["Title"] = "Leaderboard";
    var levelQuery = Model.CurrentLevel == 0 ? "" : $"&level={Model.CurrentLevel}";
    var levelName = Model.CurrentLevel == 0 ? "Top Score" : $"Level {Model.CurrentLevel}";
    var playerQuery = string.IsNullOrEmpty(Model.PlayerName) ? "" : $"&player={Model.PlayerName}";
    var numLevels = 5;

    Layout = null; // explicitly disable layout
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Leaderboard – @levelName</title>
    <link rel="stylesheet" href="~/css/leaderboard.css" />
</head>
<body>



    <div class="leaderboard-container">
        <div class="leaderboard-table">
            <div class="header-links">

                <h1>
                    Leaderboard – @levelName
                </h1>

                <!-- Player Stats -->
                @if (!string.IsNullOrEmpty(Model.PlayerName))
                {


                    @if (Model.PlayerRow is not null)
                    {
                        <p class="leaderboard-meta">
                            <strong>@Model.PlayerRow.PlayerName</strong> is ranked <strong>#@Model.PlayerRow.Rank</strong> out of <strong>@Model.TotalPlayers</strong> players 
                            @if (Model.CurrentLevel != 0)
                            {
                                <text> in <strong>Level @Model.CurrentLevel</strong></text>
                            }
                            with a score of <strong>@Model.PlayerRow.TotalScore.ToString("N0")</strong>
                        </p>
                    }
                    else
                    {
                        <p class="leaderboard-meta">
                            <strong>@Model.PlayerName</strong> is not yet ranked
                            @if (Model.CurrentLevel != 0)
                            {
                                <text> in <strong>Level @Model.CurrentLevel</strong></text>
                            }
                        </p>
                    }

                }
                else
                {
                    <p class="leaderboard-meta"> - </p>
                }

                <!-- Levels -->
                <div class="level-links" style="margin-bottom: 15px;">
                    <a class="@(Model.CurrentLevel == 0 ? "active-level" : "")" href="/Leaderboard?page=0&level=0@(playerQuery)">Top Score</a>

                    <span style="margin-left: 10px;">
                        @for (int i = 1; i <= numLevels; i++)
                        {
                            var isActive = i == Model.CurrentLevel ? "active-level" : "";
                            <a class="@isActive" href="/Leaderboard?page=0&level=@i@playerQuery" style="margin-left: 10px;">Level @i</a>
                        }
                    </span>
                </div>
            </div>

            <!-- Scores -->
            <table class="table">
                <thead>
                    <tr>
                        <th>Rank</th>
                        <th>Player</th>
                        <th>Score</th>
                        <th>Last Played</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < 10; i++)
                    {

                        if (i < Model.Scores.Count)
                        {
                            var entry = Model.Scores[i];
                            var isCurrentPlayer = Model.PlayerRow != null &&
                            entry.PlayerName.Equals(Model.PlayerRow.PlayerName, StringComparison.OrdinalIgnoreCase);
                            <tr class="@(isCurrentPlayer ? "highlight-player" : "")">
                                <td>@entry.Rank</td>
                                <td>
                                    <a href="/Leaderboard?page=0@(levelQuery)&player=@entry.PlayerName">@entry.PlayerName</a>
                                </td>
                                <td>@entry.TotalScore.ToString("N0")</td>
                                <td>@entry.LatestSubmission.ToLocalTime().ToString("MMM d 'at' h:mm tt")</td>
                            </tr>
                        }
                        else
                        {
                            <tr>
                                <td colspan="4">&nbsp;</td> <!-- Empty row -->
                            </tr>
                        }
                    }
                </tbody>
            </table>

            <!-- Pagination -->
            <div class="pagination">
                <a class="nav-button @(Model.CurrentPage == 1 ? "disabled" : "")"
                   href="/Leaderboard?page=@(Model.CurrentPage - 1)@levelQuery@playerQuery">
                    ← Prev
                </a>

                <span class="page-info">Page @Model.CurrentPage of @Model.TotalPages</span>

                <a class="nav-button @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")"
                   href="/Leaderboard?page=@(Model.CurrentPage + 1)@levelQuery@playerQuery">
                    Next →
                </a>

            </div>

            <hr class="section-separator" />

            <!-- Score Submission -->
            <form method="post" class="score-form">
                @Html.AntiForgeryToken()

                <div class="form-field player-name-field">
                    <label for="SubmitPlayerName">Player Name:</label>
                    <input type="text" id="SubmitPlayerName" name="SubmitPlayerName"
                           asp-for="SubmitPlayerName"
                           value="@Model.PlayerName"
                           required
                           pattern=".*[^ ].*"
                           maxlength="50"
                           title="Player name cannot be empty or just spaces" />
                </div>

                <div class="form-field level-field">
                    <label for="Level">Level:</label>
                    <input type="number" id="Level" name="Level"
                           asp-for="Level"
                           value="@(Model.CurrentLevel > 0 ? Model.CurrentLevel : "")"
                           min="1" max="5" required />
                </div>

                <div class="form-field score-field">
                    <label for="Score">Score:</label>
                    <input type="number" id="Score" name="Score"
                           asp-for="Score" min="1" max="1000000" required />
                </div>

                <div class="form-field">
                    <button type="submit">Submit Score</button>
                </div>
            </form>

        </div>
    </div>
</body>
</html>
